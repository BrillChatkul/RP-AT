{"version":3,"sources":["logo.svg","component/Oneverone.js","component/Listname.js","component/Resultpage.js","App.js","reportWebVitals.js","index.js"],"names":["Oneverone","props","setvalue","removeAR","useState","name","setName","className","type","value","onKeyDown","e","key","document","getElementById","click","CheckEnter","maxLength","onChange","target","onChangeName","id","onClick","alert","Listname","Resultpage","endPage","PeopleList","NewPeopleList","NewRandom","ShowPeople","map","n","i","style","color","fontWeight","fontStyle","textDecoration","display","flexDirection","alignItems","width","overflowY","justifyContent","window","confirm","App","dataArray","setDataArray","Page","SetPage","dataNewArray","setDataNewArray","showDataArray","length","sameName","a","copyDataList","text","pop","copyArray","notsameData","x","randomIndex","Math","floor","random","temp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.072d5c84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './Oneverone.css'\r\nimport { Button } from 'react-bootstrap';\r\nimport { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nfunction Oneverone(props) {\r\n  const{ setvalue,removeAR } = props\r\n  const [name,setName] = useState('')\r\n  function CheckEnter(e){\r\n    if(e.key === 'Enter'){\r\n      document.getElementById('buttonRandom').click()\r\n    }\r\n  }\r\n  function onChangeName(e){\r\n    setName(e.target.value)\r\n  }\r\n  function SentName(){\r\n    if(name === ''){\r\n      alert('please enter name.')\r\n    }\r\n    else{\r\n    setvalue(name)\r\n      setName('')}\r\n  }\r\n  return (\r\n       \r\n        <div className='Container-1v1'>\r\n          <p className='Oneverone-topic'>1v1</p>\r\n          <p className='Oneverone-font'>Enter Name</p>\r\n          <input className='Input-name' type='text' value={name} onKeyDown={((e)=>{CheckEnter(e)})} maxLength='15' onChange={(e)=>{onChangeName(e)}}></input>\r\n          <br/>\r\n          <div>\r\n          <button id='buttonRandom' className='Oneverone-button' onClick={(e)=>{SentName(e)}}>Enter</button>\r\n          <button className='Oneverone-button' onClick={(e)=>{removeAR()}}>Remove</button></div>\r\n          {/* {name != ''?<p>{name}</p>:null} */}\r\n        </div>\r\n            \r\n      \r\n    );\r\n  }\r\n  \r\n  export default Oneverone;","import './Listname.css'\r\nfunction Listname(props){\r\n    const {name} = props\r\n    return(\r\n        <div className='Listname-container'>\r\n            {name}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Listname;","import './Resultpage.css'\r\nfunction Resultpage(props){\r\n    const{ endPage, PeopleList, NewPeopleList,NewRandom } = props\r\n    const ShowPeople = PeopleList.map((n,i)=><p><span style={{color:'#FF6666',fontWeight:'bold'}}>{n} </span>\r\n    วาดของ <span style={{fontStyle:'italic',textDecoration:'underline'}}>{NewPeopleList[i]}</span> </p>)\r\n    return(\r\n        <div className='Resultpage-Container'>\r\n            <div className='Resultpage-page'>\r\n                <p className='Resultpage-header'>RESULT</p>\r\n                <div className='Resultpage-line'></div>\r\n                <br/>\r\n                <div style={{display:'flex',flexDirection:'column',alignItems:'center',width:'80%',overflowY:'scroll'}}>\r\n                {ShowPeople}\r\n                </div>\r\n                <br/>\r\n                <div style={{display:'flex',justifyContent:'center'}}>\r\n                    <button className='RE-Button-random' onClick={()=>{NewRandom()}}>New random</button>\r\n                    <button className='RE-Button-random' onClick={()=>{\r\n                        var checkConfirm = window.confirm('Close result?\\n***Close will not this save result.')\r\n                        if (checkConfirm == true){\r\n                        endPage(false)}}}>Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Resultpage","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Oneverone from './component/Oneverone';\r\nimport Listname from './component/Listname';\r\nimport Resultpage from './component/Resultpage';\r\nimport { useState } from 'react';\r\n\r\nfunction App() {\r\n  const [showData,setShowData] = useState('No data')\r\n  const [dataArray,setDataArray] = useState([])\r\n  function pushArray(e){\r\n    if(dataArray.length < 12){\r\n      let sameName = false\r\n      for(let a=0;a<dataArray.length;a++){\r\n        if(e===dataArray[a]){\r\n          alert('Same Name!!\\nPlease Enter different name.')\r\n          sameName = true\r\n          break\r\n        }\r\n      }\r\n      if (sameName === false){\r\n        setDataArray([...dataArray, e])\r\n      }\r\n    }\r\n    else{\r\n      alert('No more than 12.');\r\n    }\r\n  }\r\n\r\n  function RemoveName(){\r\n    let copyDataList = [...dataArray];\r\n    if(copyDataList.length>0){\r\n      let text = 'Delete '+dataArray[dataArray.length-1]\r\n      var checkConfirm = window.confirm(text)\r\n      if (checkConfirm == true){\r\n        copyDataList.pop();\r\n        setDataArray(copyDataList);\r\n      }\r\n    }\r\n    else{\r\n      alert('No people in list.')\r\n    }\r\n  }\r\n\r\n  const [Page,SetPage] = useState(false)\r\n  const [dataNewArray,setDataNewArray] = useState([])\r\n  function Randompage(){\r\n    if(dataArray.length>1){\r\n      let copyArray = [...dataArray]\r\n      var notsameData = false\r\n      do{\r\n        notsameData = true;\r\n        for(var x = 0;x<copyArray.length;x++){\r\n          var randomIndex = Math.floor(Math.random()*copyArray.length)\r\n          var temp = copyArray[x]\r\n          copyArray[x] = copyArray[randomIndex]\r\n          copyArray[randomIndex] = temp\r\n        }\r\n        for(var x=0;x<copyArray.length;x++){\r\n          if(dataArray[x]==copyArray[x]){\r\n            notsameData = false;\r\n            }\r\n        }\r\n      }while(notsameData == false)\r\n      setDataNewArray([...copyArray])\r\n      SetPage(true);\r\n    }\r\n    else{\r\n      alert('Please Enter more than 1 name before random.')\r\n    }\r\n  }\r\n  function NewRandomPage(){\r\n    var checkConfirm = window.confirm('New random?\\n***New random will remove all name.')\r\n    if (checkConfirm == true){\r\n    setDataArray([])\r\n    setDataNewArray([])\r\n    SetPage(false);\r\n    }\r\n  }\r\n  const showDataArray = dataArray.map((n)=><Listname name={n}/>)\r\n    \r\n  return (\r\n    <div>\r\n    <Oneverone setvalue={pushArray} removeAR={RemoveName}/>\r\n    <br/>\r\n    <div className='App-showData-Contain'>{showDataArray}</div>\r\n    <div className='App-footer-Contain'>\r\n    <button className='Button-random' onClick={Randompage}>Random now!!</button>\r\n    </div>\r\n    {Page==true?<Resultpage endPage={SetPage} NewRandom={NewRandomPage} PeopleList={dataArray} NewPeopleList={dataNewArray}></Resultpage>:null}\r\n    \r\n    </div>\r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}